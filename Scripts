## for replacing ">" in the aceession number with ">speciesname" and "|" with "_" using sed for the ease of identifaction that sequnce belongs to which species.

#!/bin/bash

#SBATCH --partition=defq                                              #using defq for the quick and small jobs
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=replace_accession_query sequence                   #change job name
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out                 #replace with your username
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk                   #replace with your username

# Directory containing your TXT files
input_dir="/mbxss25/data/dom/selected_genes"                  #path of directory where file are stored conating accession numbers
output_dir="/mbxss25/data/dom/query_seqs"                             #path of directory where you wish to store new files.
mkdir -p "$output_dir"                                                # Ensure the output directory exists

# Process each .txt file in the directory
for file in "$input_dir"/*.txt; do
    # Extract the base filename without the extension    
    base_filename=$(basename "$file" .txt)
    
    # Construct the output filename
    output_file="$output_dir/${base_filename}.txt"

    # Process the file and write to the output directory
    sed -e "s/>/>${base_filename}_/" -e 's/|/_/g' "$file" > "$output_file"
    
    echo "Processed and output to $output_file"
done

echo "All files have been processed."

#Input file: 1. selected_genes.zip
#Output directory: 2. query_seqs.zip

#Note: zip files are uploaded only because of github limitation. Original file does not have .zip extention.
------------------------------------------------------------------------------------------------------------------------------------------------------
## for replacing ">" in the aceession number with ">speciesname" and "|" with "_" using sed for the ease of identifaction that sequnce belongs to which species.

#!/bin/bash

#SBATCH --partition=defq                                              #using defq for the quick and small jobs
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=replace_accession                                  #change job name
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out                 #replace with your username
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk                   #replace with your username

# Directory containing your TXT files
input_dir="/mbxss25/data/dom/subject_dborg"                  #path of directory where file are stored conating accession numbers
output_dir="/mbxss25/data/dom/subject_db"                             #path of directory where you wish to store new files.
mkdir -p "$output_dir"                                                # Ensure the output directory exists

# Process each .txt file in the directory
for file in "$input_dir"/*.txt; do
    # Extract the base filename without the extension    
    base_filename=$(basename "$file" .txt)
    
    # Construct the output filename
    output_file="$output_dir/${base_filename}.txt"

    # Process the file and write to the output directory
    sed -e "s/>/>${base_filename}_/" -e 's/|/_/g' "$file" > "$output_file"
    
    echo "Processed and output to $output_file"
done

echo "All files have been processed."

#Input file: 3_subject_dborg.zip
#Output directory: 4_subject_db.zip

#Note: zip files are uploaded only because of github limitation. Original file does not have .zip extention.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
# To translate the DNA sequnces into amino acids, using biopython.

from Bio import SeqIO
from Bio.SeqRecord import SeqRecord
import sys
import os

def translate_dna(input_file, output_file):
    records = SeqIO.parse(input_file, "fasta")
    protein_records = []

    for record in records:
        seq_length = len(record.seq)
        trim_length = seq_length - (seq_length % 3)
        trimmed_seq = record.seq[:trim_length]
        protein_seq = trimmed_seq.translate()
        protein_record = SeqRecord(protein_seq, id=record.id, description="translated sequence")
        protein_records.append(protein_record)

    SeqIO.write(protein_records, output_file, "fasta")

def ensure_directory_exists(output_dir):
    if not os.path.exists(output_dir):
        os.makedirs(output_dir)

def process_files(input_path, output_dir):
    ensure_directory_exists(output_dir)
    
    if os.path.isdir(input_path):
        # Process each file in the directory
        for filename in os.listdir(input_path):
            file_path = os.path.join(input_path, filename)
            if filename.endswith(".txt"):  # Ensure processing only text files
                output_file = os.path.join(output_dir, filename.replace('.txt', '_protein.fasta'))
                translate_dna(file_path, output_file)
                print(f"Translated {file_path} to {output_file}")
    elif os.path.isfile(input_path):
        # Process a single file
        if input_path.endswith(".txt"):  # Ensure processing only text files
            filename = os.path.basename(input_path)
            output_file = os.path.join(output_dir, filename.replace('.txt', '_protein.fasta'))
            translate_dna(input_path, output_file)
            print(f"Translated {input_path} to {output_file}")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("Usage: python script.py <input_path> <output_dir>")
        sys.exit(1)
    
    input_path = sys.argv[1]
    output_dir = sys.argv[2]
    
    process_files(input_path, output_dir)

----------------------------------------------------
#to run above python script for translation

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=DNA_AA_translation
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

input_dir="subject_db"
output_dir="aa_data"

python ./translate.py "$input_dir" "$output_dir"

#output file: 5_aa_data.zip
---------------------------------------------------------
#to merge all the translated sequnces in single fasta file.

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=merging_aa
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

# Define the directory containing your FASTA files
directory="./aa_data"

# Define the output file where the merged FASTA will be saved
output_file="./merged_all_aminoacids"

# Ensure the output file is empty
> "$output_file"

# Loop through all FASTA files in the specified directory, sorted alphabetically
for file in $(find "$directory" -name '*.fasta' | sort); do
    echo "Merging $file into $output_file"
    # Optionally, you can add a newline before each new file's content to ensure no run-ons from previous files
    echo "" >> "$output_file"
    cat "$file" >> "$output_file"
done

echo "All FASTA files have been merged into $output_file"

#Output file: 6_merged_all_aminoacids.fasta.zip
---------------------------------------------------------
# For extracting the suquencesfrom the concated amino acid file, making a gene cluster.

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=cluster_formation
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

# Define the input and output file paths
input_file="merged_all_aminoacids.fasta"                                                #file containg all the amino acid sequences
output_file="ampd3_cluster.fasta"                                                       #output fasta file of seperate cluster

# Use sed to extract lines containing "ampd3" and redirect the output to the new file
sed -n '/ampd3/p' "$input_file" > "$output_file"

echo "Successfully separated entries containing 'ampd3' into $output_file"

#Note: This code is just for single file, executed manually for each and every gene for 100% compliance.

#Output file: 7. merged_cluster.zip (This is directory where the output of above code is stored by the name of "ampd3_cluster", and similar genes utilized in study.)

---------------------------------------------------------
# Making database for the BLAST.

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=mkdatabase01
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

# Directory where your gene cluster FASTA files are stored
CLUSTER_DIR="./merged_clusters"

# Directory to store the created BLAST databases
DB_DIR="./new_blastmkdata"

# Create the database directory if it does not exist
mkdir -p $DB_DIR

# Load BLAST module if necessary
module load blast-uoneasy/2.14.1-gompi-2023a                #for ada

# Loop through each FASTA file in the cluster directory
for fasta_file in $CLUSTER_DIR/*.fasta; do
    # Get the base name for the fasta file to name the database
    base_name=$(basename $fasta_file .fasta)

    # Create a BLAST database for each FASTA file
    makeblastdb -in $fasta_file -dbtype prot -out $DB_DIR/$base_name -title "$base_name DB"

    echo "Database created for $base_name at $DB_DIR/$base_name"
done

echo "All databases have been created."

#Output file: 8. new_blastmkdata.zip 

#The code above make database for the BLAST. this generates pdb, phr, pin, pjs, psq, ptf and pto files for each grnrcluster.

---------------------------------------------------------
# BLAST

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=final_blast
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

# Load the BLAST module
module load blast-uoneasy/2.14.1-gompi-2023a

# Define directories
QUERY_DIR="./query_seqs"
DB_DIR="./new_blastmkdata"
OUT_DIR="./final_blast"

# Ensure output directory exists
mkdir -p ${OUT_DIR}

# Run BLAST for the specified query and database
blastp -query ${QUERY_DIR}/ascl2_extracted.fa -db ${DB_DIR}/ascl2_cluster -out ${OUT_DIR}/ascl2_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/casd1_extracted.fa -db ${DB_DIR}/casd1_cluster -out ${OUT_DIR}/casd1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/cd81_extracted.fa -db ${DB_DIR}/cd81_cluster -out ${OUT_DIR}/cd81_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/cdh15_extracted.fa -db ${DB_DIR}/cdh15_cluster -out ${OUT_DIR}/cdh15_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/cdkn1c_extracted.fa -db ${DB_DIR}/cdkn1c_cluster -out ${OUT_DIR}/cdkn1c_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/commd1_extracted.fa -db ${DB_DIR}/commd1_cluster -out ${OUT_DIR}/commd1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dcn_extracted.fa -db ${DB_DIR}/dcn_cluster -out ${OUT_DIR}/dcn_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dhcr7_extracted.fa -db ${DB_DIR}/dhcr7_cluster -out ${OUT_DIR}/dhcr7_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dio3_extracted.fa -db ${DB_DIR}/dio3_cluster -out ${OUT_DIR}/dio3_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dlk1_extracted.fa -db ${DB_DIR}/dlk1_cluster -out ${OUT_DIR}/dlk1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dlx5_extracted.fa -db ${DB_DIR}/dlx5_cluster -out ${OUT_DIR}/dlx5_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/dscam_extracted.fa -db ${DB_DIR}/dscam_cluster -out ${OUT_DIR}/dscam_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/gab1_extracted.fa -db ${DB_DIR}/gab1_cluster -out ${OUT_DIR}/gab1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/gatm_extracted.fa -db ${DB_DIR}/gatm_cluster -out ${OUT_DIR}/gatm_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/glis3_extracted.fa -db ${DB_DIR}/glis3_cluster -out ${OUT_DIR}/glis3_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/grb10_extracted.fa -db ${DB_DIR}/grb10_cluster -out ${OUT_DIR}/grb10_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/h13_extracted.fa -db ${DB_DIR}/h13_cluster -out ${OUT_DIR}/h13_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/htr2a_extracted.fa -db ${DB_DIR}/htr2a_cluster -out ${OUT_DIR}/htr2a_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/igf2_extracted.fa -db ${DB_DIR}/igf2_cluster -out ${OUT_DIR}/igf2_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/igf2r_extracted.fa -db ${DB_DIR}/igf2r_cluster -out ${OUT_DIR}/igf2r_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/impact_extracted.fa -db ${DB_DIR}/impact_cluster -out ${OUT_DIR}/impact_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/lin28b_extracted.fa -db ${DB_DIR}/lin28b_cluster -out ${OUT_DIR}/lin28b_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/lrrtm1_extracted.fa -db ${DB_DIR}/lrrtm1_cluster -out ${OUT_DIR}/lrrtm1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/naa60_extracted.fa -db ${DB_DIR}/naa60_cluster -out ${OUT_DIR}/naa60_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/osbpl5_extracted.fa -db ${DB_DIR}/osbpl5_cluster -out ${OUT_DIR}/osbpl5_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/plagl1_extracted.fa -db ${DB_DIR}/plagl1_cluster -out ${OUT_DIR}/plagl1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/pon2_extracted.fa -db ${DB_DIR}/pon2_cluster -out ${OUT_DIR}/pon2_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/pon3_extracted.fa -db ${DB_DIR}/pon3_cluster -out ${OUT_DIR}/pon3_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/rb1_extracted.fa -db ${DB_DIR}/rb1_cluster -out ${OUT_DIR}/rb1_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/sfmbt2_extracted.fa -db ${DB_DIR}/sfmbt2_cluster -out ${OUT_DIR}/sfmbt2_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/slc38a4_extracted.fa -db ${DB_DIR}/slc38a4_cluster -out ${OUT_DIR}/slc38a4_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/tssc4_extracted.fa -db ${DB_DIR}/tssc4_cluster -out ${OUT_DIR}/tssc4_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/zc3h12c_extracted.fa -db ${DB_DIR}/zc3h12c_cluster -out ${OUT_DIR}/zc3h12c_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/zfat_extracted.fa -db ${DB_DIR}/zfat_cluster -out ${OUT_DIR}/zfat_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/zim2_extracted.fa -db ${DB_DIR}/zim2_cluster -out ${OUT_DIR}/zim2_blast_results.txt -evalue 1e-7 -outfmt 6
blastp -query ${QUERY_DIR}/znf597_extracted.fa -db ${DB_DIR}/znf597_cluster -out ${OUT_DIR}/znf597_blast_results.txt -evalue 1e-7 -outfmt 6

echo "BLAST search completed for ampd3. Results are saved in ${OUT_DIR}/ampd3_blast_results.txt"

# outputfile: 9.final_blast.zip

# Note: The parameter of E value was programmed as 1e-7 for the precised homologoues sequences, and outformat was set as 6.

------------------------------------------------------------------------------------------------------------------------------------------------------------------
# To extract the homologoues sequences which show hits in BLAST.

import os
from Bio import SeqIO
import pandas as pd

def extract_sequences(subject_dir, blast_results_dir, output_dir):
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Iterate through each BLAST result file in the directory
    for blast_file in os.listdir(blast_results_dir):
        if blast_file.endswith('.txt'):
            gene_cluster = blast_file.replace('_blast_results_filtered.txt', '')  # Adjust the replacement to match the actual file naming
            fasta_file = os.path.join(subject_dir, f"{gene_cluster}_cluster.fasta")
            output_fasta = os.path.join(output_dir, f"{gene_cluster}_final.fasta")
            
            # Check if the FASTA file exists before proceeding
            if not os.path.exists(fasta_file):
                print(f"No FASTA file found for {fasta_file}")
                continue
            
            # Read the BLAST results to get the list of sequence IDs
            blast_df = pd.read_csv(os.path.join(blast_results_dir, blast_file), sep='\t', header=None, usecols=[1])
            blast_df.columns = ['sseqid']
            accession_numbers = set(blast_df['sseqid'])
            
            # Load the sequences from the FASTA file
            sequences_to_write = []
            for seq in SeqIO.parse(fasta_file, 'fasta'):
                if seq.id in accession_numbers:
                    sequences_to_write.append(seq)
                
            # Write the filtered sequences to the output FASTA file
            SeqIO.write(sequences_to_write, output_fasta, 'fasta')

# Define the directories
subject_dir = './merged_clusters'                #seperate gene cluster containing sequences for each species
blast_results_dir = './final_blast'              #hits of the homologoues sequences
output_dir = './ready_clusters'                  #new directory to store Homologoues sequences. 

# Extract sequences
extract_sequences(subject_dir, blast_results_dir, output_dir)

#the above python script was saved by the name of cluster_ready.py

#to execute the above script below sbatch job is submitted.

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=homologues
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

python cluster_ready.py

echo "done prcoessing"

#output file: 11. ready_cluster (homologous sequences)

------------------------------------------------------------------------------------------------------------------------------------------------------------------
# installation of MAFFT is pre-requisite 
MAFFT: conda install bioconda::mafft

# for the sequnce assembly of all the homologoues sequences.

import os
import subprocess

def align_sequences(input_dir, output_dir):
    # Ensure the output directory exists
    os.makedirs(output_dir, exist_ok=True)
    
    # Iterate over each file in the input directory
    for file_name in os.listdir(input_dir):
        if file_name.endswith('.fasta'):
            input_path = os.path.join(input_dir, file_name)
            output_path = os.path.join(output_dir, f"aligned_{file_name}")
            
            # Command to run MAFFT
            mafft_command = ['mafft', '--auto', input_path]
            
            # Run the MAFFT alignment and capture the output
            with open(output_path, 'w') as output_file:
                subprocess.run(mafft_command, stdout=output_file, text=True)
            print(f"Alignment completed for {file_name} and saved to {output_path}")

# Define the directories
input_dir = './ready_clusters'
output_dir = './aligned_sequences'

# Run the alignment function
align_sequences(input_dir, output_dir)

#sbatch submission for the execution of above python script.


#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=seq_align01
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

python seq_align01.py                                    #saved filename of the above python script

echo "done prcoessing"

#output file: 12. aligned_sequences.zip

------------------------------------------------------------------------------------------------------------------------------------------------------
#to built the phylogenetic trees, utilized FigTree.

#Intallation of IQtree is pre-requisite 
conda install -c bioconda iqtree

#!/bin/bash

#SBATCH --partition=defq
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --cpus-per-task=8
#SBATCH --mem=50g
#SBATCH --time=10:00:00
#SBATCH --job-name=iqtree01
#SBATCH --output=/gpfs01/home/mbxss25/slurm-%x-%j.out
#SBATCH --mail-type=ALL
#SBATCH --mail-user=mbxss25@exmail.nottingham.ac.uk

# Directory containing your aligned sequences
ALIGNED_SEQ_DIR="./aligned_sequences"

# Output directory for the trees
OUTPUT_DIR="./output_trees"
mkdir -p "$OUTPUT_DIR"

# Activate the Conda environment where IQ-TREE is installed
conda activate iqtree

# Loop over each aligned fasta file in the directory
for FILE in "$ALIGNED_SEQ_DIR"/*.fasta; do
    # Extract the base name for output naming
    BASENAME=$(basename "$FILE" .fasta)

    # Command to run IQ-TREE, adjust parameters as needed
    iqtree -s "$FILE" -m TEST -bb 1000 -nt AUTO -pre "$OUTPUT_DIR/$BASENAME"

    # -m TEST automatically determines the best-fit model of DNA/protein evolution
    # -bb 1000 runs 1000 ultrafast bootstrap replicates
    # -nt AUTO lets IQ-TREE decide the best number of threads to use
    # -pre specifies a prefix for all output files
done

echo "All genetic trees have been built and are stored in $OUTPUT_DIR."

#output file: 13. output_trees.zip
#bootstrp value set as 1000, it generated multiple files for singlee gene like .nioj, .ckp.gz, .contre, .iqtree, .log, .mldist, .model, splits.
#Note: we extracted the branch length and uploaded branch lengths of all gene trees in branch_length_data.docx, which is uploaded on this repository
------------------------------------------------------------------------------------------------------------------------------------------------------
#FigTree vizualization
#no code for those, however vizualizations are uploded on this repository as figtree_vizuals.zip
------------------------------------------------------------------------------------------------------------------------------------------------------
#statistical test (b and c)
#Done using R of all 35 genes

#statistical analysis for comparing branch lengths within gene of different species.

#Ampd3
  
  # Create a data frame with species and their branch lengths
  species <- c("asalmon", "catfish", "goldfish", "cow", "sheep", "rabbit", "Human", "macaque",
               "mouse", "rat", "pig", "opossum", "wallaby", "platypus", "platyfish", "sfightfish",
               "psolderfish", "imedaka", "mplatyfish", "platyfish_2", "sfightfish_2", "psolderfish_2")

branch_lengths <- c(0.3147155284, 0.1266752256, 0.2014479677, 0.0031934886, 0.0127031692, 0.0215495636,
                    0.0142581311, 0.00500846416, 0.0001841790, 0.0450726436, 0.0089775967, 0.0246567060,
                    0.0186123095, 0.0991088290, 0.1479684233, 0.3415666887, 0.0778627024, 0.1534971393,
                    0.0019947158, 0.0033699690, 0.2329132280, 0.0574678871)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#Asb4

# Create a data frame with species and their branch lengths
species <- c("catfish_1", "catfish_2", "cow", "sheep", "Human", "macaque", "rabbit", "mouse", "rat", "pig", 
             "dog", "hagfish", "reedfish", "asalmon", "imedaka", "jricefish", "mplatyfish", "platyfish", 
             "sfightfish", "psolderfish", "goldfish")

branch_lengths <- c(0.1931788056, 0.0581727292, 0.1891554181, 0.0044757454, 0.0000020219, 0.0106557828, 
                    0.0288790655, 0.0047532053, 0.0195811270, 0.0969453176, 0.0000020196, 1.2656155942, 
                    0.1748062969, 0.2777902469, 0.0311058711, 0.0270914320, 0.0060975198, 0.0116564547, 
                    0.1861661242, 0.1611768520, 0.2334015204)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#Ascl2

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "mouse", "rat", "Human", "wallaby", "macaque", "sheep")

branch_lengths <- c(0.0051102290, 0.0200226956, 0.0342312546, 0.0775635881, 0.0052534000, 
                    0.3947622722, 0.0123083594, 0.0217058550)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#Casd1

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "pig", 
             "sheep", "platypus", "wallaby", "reedfish", "asalmon", "imedaka", "jricefish", 
             "mplatyfish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.1851348947, 0.0027514162, 0.0217043375, 0.0045166718, 0.0052817374, 
                    0.0614995118, 0.0170436567, 0.0387399820, 0.0106050912, 0.0077293180, 
                    0.2055969372, 0.1566068830, 0.2609305303, 0.2822536152, 0.0082360888, 
                    0.0165311607, 0.0235498393, 0.0093565654, 0.1007548002, 0.1082811389, 
                    0.0689539943, 0.0547851827)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#cd81
# Create a data frame with species and their branch lengths
species <- c("catfish", "Human", "macaque", "wallaby", "rat", "pig", "sheep", "mouse")

branch_lengths <- c(1.0043826488, 0.0335098917, 0.1470924144, 0.2558775643, 0.0546522027, 
                    0.0738912833, 0.0716510339, 0.0000020899)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#cdh15
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "mouse", "rat", "opossum", 
             "wallaby", "platypus", "reedfish", "asalmon", "imedaka", "jricefish", "mplatyfish", 
             "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.2509165334, 0.0132993050, 0.0081423864, 0.0640112484, 0.0900800282, 
                    0.0149816539, 0.0490007644, 0.0116991378, 0.0325165102, 0.1769727597, 
                    0.0350557658, 0.1588057565, 0.5735342695, 0.3012832373, 0.0174192612, 
                    0.0275995115, 0.0450252652, 0.0142077159, 0.1602431030, 0.1215879011, 
                    0.0540397302, 0.0394150713)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#cdkn1c
# Create a data frame with species and their branch lengths
species <- c("cow", "Human_1", "Human_2", "macaque", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.1938272646, 0.0000027572, 0.0096730514, 0.0550106566, 
                    0.0489681178, 0.0000026236, 0.0620250762, 0.0072706210)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#commd1
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "rat", "pig", "Human", "macaque", "mouse", 
             "rabbit", "opossum", "wallaby", "platypus", "reedfish", "imedaka", "jricefish", 
             "mplatyfish", "platyfish", "psolderfish", "sfightfish", "goldfish_1", "goldfish_2", "goldfish_3")

branch_lengths <- c(0.1434924344, 0.0064036340, 0.2008323328, 0.1231680578, 0.2766745967, 
                    0.0168850978, 0.0057133563, 0.0054737796, 0.5669575617, 0.0346017916, 
                    0.0838978760, 0.0655284066, 0.1449379160, 0.2490364677, 0.0076581834, 
                    0.0090180629, 0.0054457508, 0.0000023046, 0.0812101115, 0.1504127491, 
                    0.0356161656, 0.1716286224, 0.1388049333)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#dcn
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit", "opossum", "wallaby", "platypus", 
             "asalmon", "imedaka", "jricefish", "psolderfish", "mplatyfish", "platyfish", 
             "sfightfish", "catfish", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4", 
             "reedfish", "pig", "sheep")

branch_lengths <- c(0.0152487971, 0.0521972698, 0.0233298584, 0.0334490431, 0.1570637106, 
                    0.2086109322, 0.1364125380, 0.1382093485, 0.5986987478, 0.1726030041, 
                    0.2116401333, 0.2220391274, 0.0000010830, 0.0000010830, 0.5879259668, 
                    0.3957401854, 0.0080024618, 0.0184104625, 0.0000010830, 0.0056724237, 
                    0.3987936391, 0.0425973991, 0.0076538467)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#dhcr7
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "Human", "macaque", "pig", "mouse", "rat", 
             "wallaby", "hagfish", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", 
             "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.1969023973, 0.0318870644, 0.0195957703, 0.0794013637, 0.0154399837, 
                    0.0190447704, 0.0553330437, 0.0169642277, 0.0376949159, 0.1634785768, 
                    0.5590368037, 0.1810968476, 0.0000028547, 0.2214952488, 0.1830180714, 
                    0.1458193336, 0.0634282189, 0.0591565570, 0.0975854895)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#dio3
# Create a data frame with species and their branch lengths
species <- c("cow", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4", "goldfish_5", "goldfish_6", "goldfish_7", "goldfish_8",
             "goldfish_9", "imedaka_1", "psolderfish", "imedaka_2", "wallaby", "Human", "rabbit", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0140382600, 0.0000000000, 0.0000000000, 0.0000023513, 0.0000020148, 
                    0.0000023513, 0.0000023513, 0.0000023513, 0.0152778019, 0.0166736659,
                    0.1207853984, 0.0600380674, 0.2655185674, 0.2557983962, 0.0036133745, 
                    0.7455425898, 0.0068906397, 0.0000023513, 0.0351084795, 0.0000023513)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#dlk1
# Create a data frame with species and their branch lengths
species <- c("asalmon", "catfish", "goldfish_1", "goldfish_2", "cow", "sheep", "pig", 
             "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "reedfish", 
             "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish")

branch_lengths <- c(0.4057310239, 0.3826195137, 0.0402946619, 0.0710395819, 0.0184243643, 
                    0.0234691899, 0.1176038598, 0.0444382782, 0.0275059345, 0.0621860475, 
                    0.1782185569, 0.0312280948, 0.0241757726, 0.3931132548, 0.5348869800, 
                    0.0182727458, 0.0109113360, 0.3020223949, 0.0000028229, 0.1198581614, 
                    0.1501241519)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)


#dscam
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "goldfish_1", "goldfish_2", "imedaka", "jricefish", "platyfish", "sfightfish", 
             "psolderfish", "opossum", "Human_1", "Human_2", "macaque", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0000010079, 0.0044170449, 0.0114301393, 0.0096477861, 0.0127407911, 
                    0.0098147807, 0.0249369016, 0.0158660176, 0.0149145804, 0.0269899974, 
                    0.0000010079, 0.0000010079, 0.0005101618, 0.0000010079, 0.0004977071, 
                    0.0065725829, 0.0014862782)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#gab1
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "rabbit", "mouse", "rat", 
             "Human", "macaque", "opossum", "wallaby", "platypus", "reedfish", 
             "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", 
             "goldfish_1", "goldfish_2")

branch_lengths <- c(0.1872110972, 0.0042481795, 0.0041316295, 0.0379862532, 0.0217405804, 
                    0.0435208401, 0.0379426528, 0.0537176696, 0.0058519801, 0.0050837760, 
                    0.0381628339, 0.0203924264, 0.0256492203, 0.2533123599, 0.0034330709, 
                    0.0337640006, 0.1296191896, 0.0508342445, 0.0432779283, 0.0732887035, 
                    0.0361420839)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#gatm
# Create a data frame with species and their branch lengths
species <- c("catfish_1", "catfish_2", "cow", "sheep", "dog", "opossum", "Human", "macaque", 
             "rabbit", "reedfish", "goldfish_1", "goldfish_2", "goldfish_3", "imedaka", 
             "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish", "catfish_3", "catfish_4")

branch_lengths <- c(0.0116263328, 0.0000010172, 0.0162133489, 0.0158547634, 0.0149086526, 
                    0.0368823341, 0.0088509362, 0.0171503419, 0.0488938241, 0.1130818122, 
                    0.0046721519, 0.0000010172, 0.0937337570, 0.0061363519, 0.0599774593, 
                    0.0000010172, 0.0000010172, 0.1142939837, 0.0508423918, 0.0000010172, 0.0044562039)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#glis3
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat",
             "opossum", "wallaby", "platypus", "imedaka", "jricefish", "mplatyfish", "platyfish",
             "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.3535785593, 0.0100974211, 0.0094605835, 0.0370199285, 0.0514208913, 
                    0.0329289929, 0.0090276525, 0.0404214959, 0.0210653072, 0.0274262935, 
                    0.0138939529, 0.0284853682, 0.0798407329, 0.0139139455, 0.0383598213, 
                    0.0704298497, 0.0078575163, 0.3130425228, 0.1804415493, 0.0025676831, 
                    0.0085933001)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#grb10
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "goldfish", "imedaka", "jricefish", "platyfish", "sfightfish", 
             "psolderfish", "hagfish", "opossum", "wallaby", "Human", "macaque", "rabbit", 
             "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0097308884, 0.0699152432, 0.0921884775, 0.0784976876, 0.0136011283, 
                    0.1085984878, 0.0595480677, 0.0228720876, 1.0950071459, 0.0163622940, 
                    0.0202290764, 0.0042553214, 0.0569503444, 0.1021281608, 0.0227580550, 
                    0.0293922435, 0.0505513568, 0.0188727870)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#htr2a
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "opossum", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4",
             "goldfish_5", "goldfish_6", "imedaka", "jricefish", "platyfish", "sfightfish",
             "psolderfish", "Human", "macaque", "mouse", "rat", "rabbit", "pig", "sheep")

branch_lengths <- c(0.0071940736, 0.0301051387, 0.2632995537, 0.0326559751, 0.1235121393, 
                    0.0380213620, 0.0042245463, 0.1312696812, 0.5056138548, 0.1362131867,
                    0.0034831404, 0.2167364877, 0.2292252639, 0.0882849903, 0.0000025144,
                    0.0076212171, 0.0096377885, 0.0204047070, 0.0508567287, 0.0285034451,
                    0.0247523659)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#igf2
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "Human", "macaque", "wallaby", "mouse", "rat", "sheep")

branch_lengths <- c(5.2499771172, 0.0000023631, 0.2501200858, 0.0653180309, 0.0000022539, 
                    1.0064636886, 0.0493037101, 0.0289216618, 0.0729959662)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#igf2r
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", 
             "mouse", "rat", "opossum", "platypus", "reedfish", "asalmon", "imedaka", 
             "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.2908769061, 0.0236149481, 0.0281474810, 0.0864078277, 0.0776954217, 
                    0.0217273885, 0.0300121360, 0.2009358115, 0.0328980534, 0.0408796312, 
                    0.1759768633, 0.2009510702, 0.4308277537, 0.3209193880, 0.0503666143, 
                    0.0402080160, 0.2429290927, 0.2083643943, 0.1700630678, 0.1217247684, 
                    0.0936552527)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#impact
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "pig", "Human", "macaque", "rabbit", 
             "mouse", "rat", "opossum", "reedfish", "imedaka", "jricefish", 
             "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.3645343694, 0.0673480048, 0.0455625425, 0.0544064007, 
                    0.0040610938, 0.0000019972, 0.2821983197, 0.1092647689, 
                    0.1001771118, 0.1447400460, 0.4472904332, 0.2440556192, 
                    0.1359002442, 0.1586463997, 0.1700433487, 0.0841683299, 
                    0.0166098663, 0.0089697999)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#lin28b
# Create a data frame with species and their branch lengths
species <- c("catfish_1", "catfish_2", "cow", "pig", "sheep", "dog", "Human", "mouse", 
             "rat", "macaque", "rabbit", "opossum", "wallaby", "reedfish", "imedaka", 
             "jricefish", "platyfish", "psolderfish", "sfightfish", "goldfish_1", 
             "goldfish_2", "goldfish_3", "goldfish_4")

branch_lengths <- c(0.2099123774, 0.5742520224, 0.0988597469, 0.0047952992, 0.8534256275, 
                    0.0455625425, 0.0022102646, 0.0284116869, 0.0414143863, 0.0305357474, 
                    0.0660834331, 0.0097311564, 0.0954293807, 0.4970692898, 0.0395855195, 
                    0.0360508139, 0.0514808765, 0.0529380138, 0.0492276856, 0.0078481891, 
                    0.0065363268, 0.0144290125, 0.0114238039)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#lrrtm1
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "Human", "macaque", "rat", "mouse", 
             "rabbit", "dog", "opossum", "platypus", "reedfish", "imedaka", "jricefish", 
             "platyfish", "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.0737786785, 0.0021673003, 0.0000025938, 0.0063561514, 0.0021678522, 
                    0.0021720593, 0.0115169572, 0.0042691969, 0.0822475890, 0.0125564962, 
                    0.0459871771, 0.0824201214, 0.0891323712, 0.0076169050, 0.0010838226, 
                    0.0422891854, 0.0242981219, 0.0205629284, 0.0141519619)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#naa60
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "pig", "rabbit", "mouse", 
             "macaque", "rat", "opossum", "sheep")

branch_lengths <- c(0.0000020286, 0.1536512310, 0.0203021797, 0.0044994776, 0.0078637490, 
                    0.0041069618, 0.7456022334, 0.1040223800, 0.0479091230, 0.0082257527)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#osbpl5
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", 
             "mouse", "rat", "opossum", "wallaby", "reedfish", "imedaka", 
             "jricefish", "platyfish", "sfightfish", "psolderfish", 
             "goldfish_1", "goldfish_2")

branch_lengths <- c(0.1458124884, 0.0057729919, 0.0168204792, 0.0388053212, 
                    0.0591310361, 0.0076157521, 0.0206628626, 0.0180450198, 
                    0.0161956445, 0.0585569429, 0.0599842536, 0.4413103892, 
                    0.0205741695, 0.0152159753, 0.1029129909, 0.0582269026, 
                    0.1816927301, 0.0348310027, 0.0786396244)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#plagl1
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "hagfish", "opossum", "Human", "macaque", 
             "rabbit", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0194626249, 0.0191125805, 1.1371154170, 0.2021487465, 
                    0.0000029958, 0.0110204225, 0.0618356602, 0.0950481189, 
                    0.0879394191, 0.0068137620, 0.0383106375)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#pon2
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "opossum", "wallaby", 
             "rabbit", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0055585162, 0.1605448571, 0.0092445340, 0.0132764349, 
                    0.2413293314, 0.0697122226, 0.0372865997, 0.0323480216, 
                    0.0149859150, 0.0190708493, 0.0143350995)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#pon3
# Create a data frame with species and their branch lengths
species <- c("cow", "Human", "macaque", "rabbit", "mouse", "rat", "pig", "sheep")

branch_lengths <- c(0.0797574974, 0.0177860978, 0.0176633739, 0.1974271084, 
                    0.0465122882, 0.1177570492, 0.1023570242, 0.0258231285)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#rb1
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "pig", "Human", "macaque", 
             "rabbit", "mouse", "rat", "platypus", "opossum", "wallaby", 
             "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", 
             "psolderfish", "goldfish_1", "goldfish_2")

branch_lengths <- c(0.2055812757, 0.0081434574, 0.0021595416, 0.0332168073, 
                    0.0196866621, 0.0066102568, 0.0000027648, 0.0297671795, 
                    0.0186874015, 0.0324412708, 0.1023786286, 0.0521032423, 
                    0.0305978487, 0.3856571933, 0.0213174560, 0.0170554119, 
                    0.1354484982, 0.1206411549, 0.1489856306, 0.0751267468, 
                    0.0240459072)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#sfmbt2
# Create a data frame with species and their branch lengths
species <- c("asalmon", "catfish", "goldfish_1", "goldfish_2", "cow", "sheep", "pig", "dog", 
             "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "platypus", "reedfish", 
             "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish")

branch_lengths <- c(0.3893371610, 0.2038967584, 0.0488864476, 0.0268946144, 0.0015119353, 
                    0.0147962157, 0.0634928125, 0.0430449771, 0.0091752679, 0.0142262131, 
                    0.0250512057, 0.1195188937, 0.1190891183, 0.0611817190, 0.0423816106, 
                    0.1418717385, 0.0149312441, 0.0295483094, 0.1616777144, 0.0000024080, 
                    0.1093360667, 0.1054227938)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#slc38a4
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "pig", "Human", "macaque", "mouse", "rat", 
             "rabbit", "opossum", "reedfish", "imedaka", "jricefish", "platyfish", 
             "psolderfish", "sfightfish", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4")

branch_lengths <- c(0.1192941451, 0.0069283680, 0.0164346867, 0.0753295420, 0.0529297067, 
                    0.0190784196, 0.0115024123, 0.0588143047, 0.0439372516, 0.2304188869, 
                    0.0937383792, 0.1607310087, 0.0222129042, 0.0188338567, 0.1495928077, 
                    0.1035944995, 0.0995584317, 0.0000010158, 0.0042735032, 0.0043250523, 
                    0.0044021198)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#Tssc4
# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "mouse", "rat", 
             "reedfish", "asalmon", "goldfish")

branch_lengths <- c(0.2412293671, 0.0650635270, 0.0531560164, 0.3414039653, 0.1929408882, 
                    0.0039909191, 0.0298890041, 0.0552319188, 0.0402110501, 0.7353518874, 
                    0.9254881734, 0.5227650953)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#zc3h12c
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "wallaby", 
             "platypus", "reedfish", "pig", "sheep")

branch_lengths <- c(0.0093644817, 0.0770295289, 0.0122680133, 0.0172141740, 0.0377101396, 
                    0.0188618148, 0.0162480470, 0.0228034250, 0.0292569244, 0.1484013199, 
                    0.5536163764, 0.0241887663, 0.0063339392)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#zfat
# Create a data frame with species and their branch lengths
species <- c("cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", 
             "wallaby", "reedfish", "goldfish1", "goldfish2", "goldfish3")

branch_lengths <- c(0.0085967938, 0.0240774901, 0.0540641387, 0.0900411568, 0.0082355482, 0.0216130280, 
                    0.1848942958, 0.0192151115, 0.0185209272, 0.0632621309, 0.0354126886, 0.3890100043, 
                    0.0016577287, 0.0803823496, 0.0670357840)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#znf597
# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit")

branch_lengths <- c(0.3889007220, 0.1635983387, 0.0307547632, 0.0315059287, 0.2078778802)

data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Calculate the mean and standard deviation of branch lengths
mean_branch_length <- mean(data$Branch_Length)
sd_branch_length <- sd(data$Branch_Length)

# Categorize branch lengths into "Short", "Average", and "Long"
threshold_long <- mean_branch_length + sd_branch_length
threshold_short <- mean_branch_length - sd_branch_length

data$Category <- cut(data$Branch_Length, breaks = c(-Inf, threshold_short, threshold_long, Inf), labels = c("Short", "Average", "Long"))

# Observed frequencies
observed <- table(data$Category)

# Expected frequencies assuming uniform distribution
expected <- rep(length(branch_lengths) / length(observed), length(observed))

# Perform chi-square test
chi_square_test <- chisq.test(observed, p = expected / sum(expected))

# Print the results
print(data)
print(chi_square_test)

#the entire output is stored in csv format and uploded om this repository as chi-sq_test_data.csv  
------------------------------------------------------------------------------------------------------------------------------------------------------
#stastical analysis of imprinted/nonimprinted vs others.
#statistical test c, included ANOVA test and followed by pairwise comparision.

```{r}
#Ampd3
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("asalmon", "catfish", "goldfish", "cow", "sheep", "rabbit", "Human", "macaque", "mouse", "rat", "pig", "opossum", "wallaby", "platypus", "platyfish", "sfightfish", "psolderfish", "imedaka", "mplatyfish", "platyfish_2", "sfightfish_2", "psolderfish_2")
branch_lengths <- c(0.3147155284, 0.1266752256, 0.2014479677, 0.0031934886, 0.0127031692, 0.0215495636, 0.0142581311, 0.00500846416, 0.0001841790, 0.0450726436, 0.0089775967, 0.0246567060, 0.0186123095, 0.0991088290, 0.1479684233, 0.3415666887, 0.0778627024, 0.1534971393, 0.0019947158, 0.0033699690, 0.2329132280, 0.0574678871)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#Asb4
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish_1", "catfish_2", "cow", "sheep", "Human", "macaque", "rabbit", "mouse", "rat", "pig", "dog", "hagfish", "reedfish", "asalmon", "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish", "goldfish")
branch_lengths <- c(0.1931788056, 0.0581727292, 0.1891554181, 0.0044757454, 0.0000020219, 0.0106557828, 0.0288790655, 0.0047532053, 0.0195811270, 0.0969453176, 0.0000020196, 1.2656155942, 0.1748062969, 0.2777902469, 0.0311058711, 0.0270914320, 0.0060975198, 0.0116564547, 0.1861661242, 0.1611768520, 0.2334015204)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "Human", "mouse", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#ascl4
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "mouse", "rat", "Human", "wallaby", "macaque", "sheep")
branch_lengths <- c(0.0051102290, 0.0200226956, 0.0342312546, 0.0775635881, 0.0052534000, 0.3947622722, 0.0123083594, 0.0217058550)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "mouse", "Human") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#casd1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "pig", "sheep", "platypus", "wallaby", "reedfish", "asalmon", "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.1851348947, 0.0027514162, 0.0217043375, 0.0045166718, 0.0052817374, 0.0614995118, 0.0170436567, 0.0387399820, 0.0106050912, 0.0077293180, 0.2055969372, 0.1566068830, 0.2609305303, 0.2822536152, 0.0082360888, 0.0165311607, 0.0235498393, 0.0093565654, 0.1007548002, 0.1082811389, 0.0689539943, 0.0547851827)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("pig", "sheep") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#cd81
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "Human", "macaque", "wallaby", "rat", "pig", "sheep", "mouse")
branch_lengths <- c(1.0043826488, 0.0335098917, 0.1470924144, 0.2558775643, 0.0546522027, 0.0738912833, 0.0716510339, 0.0000020899)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "pig", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#cdh15
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "mouse", "rat", "opossum", "wallaby", "platypus", "reedfish", "asalmon", "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.2509165334, 0.0132993050, 0.0081423864, 0.0640112484, 0.0900800282, 0.0149816539, 0.0490007644, 0.0116991378, 0.0325165102, 0.1769727597, 0.0350557658, 0.1588057565, 0.5735342695, 0.3012832373, 0.0174192612, 0.0275995115, 0.0450252652, 0.0142077159, 0.1602431030, 0.1215879011, 0.0540397302, 0.0394150713)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#cdkn1c
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "Human_1", "Human_2", "macaque", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.1938272646, 0.0000027572, 0.0096730514, 0.0550106566, 0.0489681178, 0.0000026236, 0.0620250762, 0.0072706210)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#commd1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "rat", "pig", "Human", "macaque", "mouse", "rabbit", "opossum", "wallaby", "platypus", "reedfish", "imedaka", "jricefish", "mplatyfish", "platyfish", "psolderfish", "sfightfish", "goldfish_1", "goldfish_2", "goldfish_3")
branch_lengths <- c(0.1434924344, 0.0064036340, 0.2008323328, 0.1231680578, 0.2766745967, 0.0168850978, 0.0057133563, 0.0054737796, 0.5669575617, 0.0346017916, 0.0838978760, 0.0655284066, 0.1449379160, 0.2490364677, 0.0076581834, 0.0090180629, 0.0054457508, 0.0000023046, 0.0812101115, 0.1504127491, 0.0356161656, 0.1716286224, 0.1388049333)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#dcn
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit", "opossum", "wallaby", "platypus", "asalmon", "imedaka", "jricefish", "psolderfish", "mplatyfish", "platyfish", "sfightfish", "catfish", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4", "reedfish", "pig", "sheep")
branch_lengths <- c(0.0152487971, 0.0521972698, 0.0233298584, 0.0334490431, 0.1570637106, 0.2086109322, 0.1364125380, 0.1382093485, 0.5986987478, 0.1726030041, 0.2116401333, 0.2220391274, 0.0000010830, 0.0000010830, 0.5879259668, 0.3957401854, 0.0080024618, 0.0184104625, 0.0000010830, 0.0056724237, 0.3987936391, 0.0425973991, 0.0076538467)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#dhcr7
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "Human", "macaque", "pig", "mouse", "rat", "wallaby", "hagfish", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.1969023973, 0.0318870644, 0.0195957703, 0.0794013637, 0.0154399837, 0.0190447704, 0.0553330437, 0.0169642277, 0.0376949159, 0.1634785768, 0.5590368037, 0.1810968476, 0.0000028547, 0.2214952488, 0.1830180714, 0.1458193336, 0.0634282189, 0.0591565570, 0.0975854895)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```



```{r}
#dio3
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4", "goldfish_5", "goldfish_6", "goldfish_7", "goldfish_8", "goldfish_9", "goldfish_10", "imedaka_1", "psolderfish", "imedaka_2", "wallaby", "Human", "rabbit", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.0140382600, 0.0000000000, 0.0000000000, 0.0000023513, 0.0000023513, 0.0000020148, 0.0000023513, 0.0000023513, 0.0152778019, 0.0166736659, 0.0889459754, 0.1207853984, 0.0600380674, 0.2655185674, 0.2557983962, 0.0036133745, 0.7455425898, 0.0068906397, 0.0000023513, 0.0351084795, 0.0000023513)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "wallaby", "Human", "mouse", "rat", "sheep", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#dlk1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("asalmon", "catfish", "goldfish_1", "goldfish_2", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "reedfish", "imedaka_1", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish")
branch_lengths <- c(0.4057310239, 0.3826195137, 0.0402946619, 0.0710395819, 0.0184243643, 0.0234691899, 0.1176038598, 0.0444382782, 0.0275059345, 0.0621860475, 0.1782185569, 0.0312280948, 0.0241757726, 0.3931132548, 0.5348869800, 0.0182727458, 0.0109113360, 0.3020223949, 0.0000028229, 0.1198581614, 0.1501241519)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "sheep", "pig", "Human", "macaque", "mouse", "rat", "opossum") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#dlx5
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "pig", "hagfish", "opossum", "wallaby", "Human", "macaque", "mouse", "rat", "rabbit", "sheep")
branch_lengths <- c(0.0000023732, 0.0069602623, 0.0104846260, 0.9348232823, 0.0355983414, 0.0427534505, 0.0033832821, 0.0069798239, 0.0000023732, 0.0104613447, 0.4645074289, 0.0000023732)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("pig", "Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#dscam
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "goldfish1", "goldfish2", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "opossum", "Human1", "Human2", "macaque", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.0000010079, 0.0044170449, 0.0114301393, 0.0096477861, 0.0127407911, 0.0098147807, 0.0249369016, 0.0158660176, 0.0149145804, 0.0269899974, 0.0000010079, 0.0000010079, 0.0005101618, 0.0000010079, 0.0004977071, 0.0065725829, 0.0014862782)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human1", "Human2", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#gab1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "rabbit", "mouse", "rat", "Human", "macaque", "opossum", "wallaby", "platypus", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish1", "goldfish2")
branch_lengths <- c(0.1872110972, 0.0042481795, 0.0041316295, 0.0379862532, 0.0217405804, 0.0435208401, 0.0379426528, 0.0537176696, 0.0058519801, 0.0050837760, 0.0381628339, 0.0203924264, 0.0256492203, 0.2533123599, 0.0034330709, 0.0337640006, 0.1296191896, 0.0508342445, 0.0432779283, 0.0732887035, 0.0361420839)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```



```{r}
#glis3
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "wallaby", "platypus", "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish", "goldfish1", "goldfish2")
branch_lengths <- c(0.3535785593, 0.0100974211, 0.0094605835, 0.0370199285, 0.0514208913, 0.0329289929, 0.0090276525, 0.0404214959, 0.0210653072, 0.0274262935, 0.0138939529, 0.0284853682, 0.0798407329, 0.0139139455, 0.0383598213, 0.0704298497, 0.0078575163, 0.3130425228, 0.1804415493, 0.0025676831, 0.0085933001)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)


```
```{r}
#grb10
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "goldfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "hagfish", "opossum", "wallaby", "Human", "macaque", "rabbit", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.0097308884, 0.0699152432, 0.0921884775, 0.0784976876, 0.0136011283, 0.1085984878, 0.0595480677, 0.0228720876, 1.0950071459, 0.0163622940, 0.0202290764, 0.0042553214, 0.0569503444, 0.1021281608, 0.0227580550, 0.0293922435, 0.0505513568, 0.0188727870)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("wallaby", "Human", "mouse", "sheep") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#htr2a
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "opossum", "goldfish1", "goldfish2", "goldfish3", "goldfish4", "goldfish5", "goldfish6", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "Human", "macaque", "mouse", "rat", "rabbit", "pig", "sheep")
branch_lengths <- c(0.0071940736, 0.0301051387, 0.2632995537, 0.0326559751, 0.1235121393, 0.0380213620, 0.0042245463, 0.1312696812, 0.0206405066, 0.1362131867, 0.0034831404, 0.2167364877, 0.2292252639, 0.0882849903, 0.0000025144, 0.0076212171, 0.0096377885, 0.0204047070, 0.0508567287, 0.0285034451, 0.0247523659)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("cow", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#igf2
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "Human", "macaque", "wallaby", "mouse", "rat", "sheep")
branch_lengths <- c(5.2499771172, 0.0000023631, 0.2501200858, 0.0653180309, 0.0000022539, 1.0064636886, 0.0493037101, 0.0289216618, 0.0729959662)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("catfish", "Human", "wallaby", "mouse", "rat") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#igf2r
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "platypus", "reedfish", "asalmon", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.2908769061, 0.0236149481, 0.0281474810, 0.0864078277, 0.0776954217, 0.0217273885, 0.0300121360, 0.2009358115, 0.0328980534, 0.0408796312, 0.1759768633, 0.2009510702, 0.4308277537, 0.3209193880, 0.0503666143, 0.0402080160, 0.2429290927, 0.2083643943, 0.1700630678, 0.1217247684, 0.0936552527)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("catfish", "Human", "rat", "cow", "sheep", "pig", "dog", "mouse", "rat", "opossum", "platypus", "reedfish", "asalmon", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```


```{r}
#impact
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "dog", "pig", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.3645343694, 0.0673480048, 0.0455625425, 0.0544064007, 0.0040610938, 0.0000019972, 0.2821983197, 0.1092647689, 0.1001771118, 0.1447400460, 0.4472904332, 0.2440556192, 0.1359002442, 0.1586463997, 0.1700433487, 0.0841683299, 0.0166098663, 0.0089697999)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("pig", "Human", "rabbit", "mouse", "rat") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#lin28b
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish_1", "catfish_2", "cow", "pig", "sheep", "dog", "Human", "mouse", "rat", "macaque", "rabbit", "opossum", "wallaby", "reedfish", "imedaka", "jricefish", "platyfish", "psolderfish", "sfightfish", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4")
branch_lengths <- c(0.2099123774, 0.5742520224, 0.0988597469, 0.0047952992, 0.8534256275, 0.1058963644, 0.0022102646, 0.0284116869, 0.0414143863, 0.0305357474, 0.0660834331, 0.0097311564, 0.0954293807, 0.4970692898, 0.0395855195, 0.0360508139, 0.0514808765, 0.0529380138, 0.0492276856, 0.0078481891, 0.0065363268, 0.0144290125, 0.0114238039)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#lrrtm1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "Human", "macaque", "rat", "mouse", "rabbit", "dog", "opossum", "platypus", "reedfish", "imedaka", "jricefish", "platyfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.0737786785, 0.0021673003, 0.0000025938, 0.0063561514, 0.0021678522, 0.0021720593, 0.0115169572, 0.0042691969, 0.0822475890, 0.0125564962, 0.0459871771, 0.0824201214, 0.0891323712, 0.0076169050, 0.0010838226, 0.0422891854, 0.0242981219, 0.0205629284, 0.0141519619)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "macaque", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#naa60


## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "pig", "rabbit", "mouse", "macaque", "rat", "opossum", "sheep")
branch_lengths <- c(0.0000020286, 0.1536512310, 0.0203021797, 0.0044994776, 0.0078637490, 0.0041069618, 0.7456022334, 0.1040223800, 0.0479091230, 0.0082257527)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#osbpl5
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "mouse", "rat", "opossum", "wallaby", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.1458124884, 0.0057729919, 0.0168204792, 0.0388053212, 0.0591310361, 0.0076157521, 0.0206628626, 0.0180450198, 0.0161956445, 0.0585569429, 0.0599842536, 0.4413103892, 0.0205741695, 0.0152159753, 0.1029129909, 0.0582269026, 0.1816927301, 0.0348310027, 0.0786396244)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```


```{r}
#pon2
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "opossum", "wallaby", "rabbit", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.0055585162, 0.1605448571, 0.0092445340, 0.0132764349, 0.2413293314, 0.0697122226, 0.0372865997, 0.0323480216, 0.0149859150, 0.0190708493, 0.0143350995)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "pig") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#pon3
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "Human", "macaque", "rabbit", "mouse", "rat", "pig", "sheep")
branch_lengths <- c(0.0797574974, 0.0177860978, 0.0176633739, 0.1974271084, 0.0465122882, 0.1177570492, 0.1023570242, 0.0258231285)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "sheep") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#rb1
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "sheep", "dog", "pig", "Human", "macaque", "rabbit", "mouse", "rat", "platypus", "opossum", "wallaby", "reedfish", "imedaka", "jricefish", "platyfish", "sfightfish", "psolderfish", "goldfish_1", "goldfish_2")
branch_lengths <- c(0.0081434574, 0.0021595416, 0.0332168073, 0.0196866621, 0.0066102568, 0.0000027648, 0.0297671795, 0.0186874015, 0.0324412708, 0.1023786286, 0.0521032423, 0.0305978487, 0.3856571933, 0.0213174560, 0.0170554119, 0.1354484982, 0.1206411549, 0.1489856306, 0.0751267468, 0.0240459072)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#sfmbt2
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("asalmon", "catfish", "goldfish_1", "goldfish_2", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "platypus", "reedfish", "imedaka", "jricefish", "mplatyfish", "platyfish", "sfightfish", "psolderfish")
branch_lengths <- c(0.3893371610, 0.2038967584, 0.0488864476, 0.0268946144, 0.0015119353, 0.0147962157, 0.0634928125, 0.0430449771, 0.0091752679, 0.0142262131, 0.0250512057, 0.1195188937, 0.1190891183, 0.0611817190, 0.0423816106, 0.1418717385, 0.0149312441, 0.0295483094, 0.1616777144, 0.0000024080, 0.1093360667, 0.1054227938)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse", "rat", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#slc38a4
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "dog", "pig", "Human", "macaque", "mouse", "rat", "rabbit", "opossum", "reedfish", "imedaka", "jricefish", "platyfish", "psolderfish", "sfightfish", "goldfish_1", "goldfish_2", "goldfish_3", "goldfish_4")
branch_lengths <- c(0.1192941451, 0.0069283680, 0.0164346867, 0.0753295420, 0.0529297067, 0.0190784196, 0.0115024123, 0.0588143047, 0.0439372516, 0.2304188869, 0.0937383792, 0.1607310087, 0.0222129042, 0.0188338567, 0.1495928077, 0.1035944995, 0.0995584317, 0.0000010158, 0.0042735032, 0.0043250523, 0.0044021198)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("pig", "mouse", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```


```{r}
#tssc4
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish", "cow", "sheep", "pig", "dog", "Human", "macaque", "mouse", "rat", "reedfish", "asalmon", "goldfish")
branch_lengths <- c(0.2412293671, 0.0650635270, 0.0531560164, 0.3414039653, 0.1929408882, 0.0039909191, 0.0298890041, 0.0552319188, 0.0402110501, 0.7353518874, 0.9254881734, 0.5227650953)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#zc3h12c
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "wallaby", "platypus", "reedfish", "pig", "sheep")
branch_lengths <- c(0.0093644817, 0.0770295289, 0.0122680133, 0.0172141740, 0.0377101396, 0.0188618148, 0.0162480470, 0.0228034250, 0.0292569244, 0.1484013199, 0.5536163764, 0.0241887663, 0.0063339392)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#zfat
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("catfish1", "catfish2", "cow", "sheep", "pig", "dog", "Human", "macaque", "rabbit", "mouse", "rat", "opossum", "wallaby", "reedfish", "goldfish1", "goldfish2", "goldfish3")
branch_lengths <- c(0.3021483855, 9.9999988669, 0.0085967938, 0.0240774901, 0.0540641387, 0.0900411568, 0.0082355482, 0.0216130280, 0.1848942958, 0.0192151115, 0.0185209272, 0.0632621309, 0.0354126886, 0.3890100043, 0.0016577287, 0.0803823496, 0.0670357840)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "mouse") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
```{r}
#znf597
## Load necessary library
library(dplyr)

# Create a data frame with species and their branch lengths
species <- c("cow", "dog", "Human", "macaque", "rabbit")
branch_lengths <- c(0.3889007220, 0.1635983387, 0.0307547632, 0.0315059287, 0.2078778802)

# Create a data frame
data <- data.frame(Species = species, Branch_Length = branch_lengths)

# Assign groups
data <- data %>%
  mutate(Category = case_when(
    Species %in% c("Human", "cow") ~ "Imprinted/non-imprinted",
    TRUE ~ "Others"
  ))

# Perform ANOVA
anova_result <- aov(Branch_Length ~ Category, data = data)

# Print the results
summary(anova_result)

# If ANOVA is significant, perform post-hoc pairwise comparisons
tukey_result <- TukeyHSD(anova_result)
print(tukey_result)

# Function for pairwise t-tests
compare_groups <- function(group1, group2) {
  data1 <- data[data$Category == group1, ]
  data2 <- data[data$Category == group2, ]
  t.test(data1$Branch_Length, data2$Branch_Length)
}

# Perform t-tests for pairwise comparisons
imprinted_vs_others <- compare_groups("Imprinted/non-imprinted", "Others")

# Print t-test results
print(imprinted_vs_others)

```
#The output is saved in the .CSV formagt which is upload on this repository as others_vs_impnonimp_ANOVA.csv


-----------------------------------------------------------------------------------------------------------------------------------------------------
